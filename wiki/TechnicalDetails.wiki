#summary Important things to know
#labels Featured

== feeds ==
  * Job ID numbers must be unique per Feed
  * keywords and skills in a feed should be listed in decreasing order of importance
  * only the first 5 skills and first 3 keywords in a job are made searchable
    * This is to limit the space consumed by [http://code.google.com/appengine/docs/python/datastore/queriesandindexes.html#Big_Entities_and_Exploding_Indexes exploding indexes]

== skills matching ==
  * queries based on skill-experience are performed using the `IN` filter operator.
    * A list of "experience" entity keys is stored in each job record. The client has a list of experience keys for the current search.
      * According to App Engine documentation: When testing a ListProperty, the equality (`=`) filter operator checks whether the argument exists as an element in the list.  If it is present, the record passes the test and may be returned with `fetch()`.  For the `IN` operator, the filter argument is a list, and a separate equality test is performed for each element.  If *any* of these tests succeeds, then the record passes the `IN` test.
    * To get around the "single-property inequality filter" limitation of App Engine, years of experience are split up into "bins" rather than measured on a continuous scale.  The client maintains a list of their highest attained bins for each skill. A job feed specifies only the minimum level of experience for the job.  However, to enable matching a job where the client's experience level falls in a higher bin than the minimum required (i.e. simulating a ">=" operator), all experience bins that meet or exceed the stated minimum are added to the job record. Thus if the possible bins include `[...2, 4, 7, 10]`, the client has specified 7 years of experience in a skill, and the job requires 4 years of experience, the bins `[4, 7, 10]` will be added to the job record, permitting 7 to match.